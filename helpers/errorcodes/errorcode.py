'''
This helper manages error codes and provide cli interface
with errors descriptions
'''

import sys
import os

#File handling
import csv

output_files = dict()

header_h = "/*\n\t This file was automaticly generated by errorcode.py\n*/\n"

header_prefix = "CODE_"

#Used by python for error code documentation
output_files["datafile"] = "../../errorcodes.csv"
#Used by Qt programm
output_files["inifile"] = "errorcodes.ini"
#Used by Arduino
output_files["header"] = "../../lib/FiringModule/ErrorCodes.h"

global commands
commands = list()
commands = [
"add",
"name",
"info",
"fix",
"description",
"update",
"delete"
]

def printHelp(args):
    help = "------------------------------\n"
    help += "OpenArdFire error codes helper\n"
    help += "------------------------------\n"
    help += "Available commands\n"
    for c in commands:
        help += "\t"
        help += c
        help += "\n"
    help += "Usage\n"
    help += args[0]
    help += " command errorcode\n"
    print(help)

def isInt(s):
    try:
        int(s)
    except ValueError:
        return False
    return True

#https://gist.github.com/garrettdreyfus/8153571
#boreycutts
def yes_or_no(question):
    answer = input(question + "(y/n): ").lower().strip()
    print("")
    while not(answer == "y" or answer == "yes" or answer == "n" or answer == "no"):
        print("Input yes or no")
        answer = input(question + "(y/n):").lower().strip()
        print("")
    if answer[0] == "y":
        return True
    else:
        return False

def getData(errorcode, col):
    with open(output_files["datafile"], 'r', encoding="utf8") as csvfile:
        reader = csv.DictReader(csvfile, delimiter='\t')
        for row in reader:
            if row['errorcode'] == errorcode:
                try:
                    return row[col]
                except KeyError:
                    return "No such col {}".format(col)

def generateFiles():
    #header
    lines = list()
    lines.append(header_h)
    with open(output_files["datafile"], 'r', encoding="utf8") as csvfile:
        reader = csv.DictReader(csvfile, delimiter='\t')
        for row in reader:
            header_name = row['name']
            header_name = header_name.upper()
            header_name = header_name.replace(' ', '_')
            line = "#define {}{} {}\n".format(header_prefix, header_name, row['errorcode'])
            lines.append(line)
    header = open(output_files["header"], "w", encoding="utf8")
    header.writelines(lines)
    header.close()


def add(errorCode):
    name = input("Provide a short name for error {} : ".format(errorCode))
    info = input("Provide some short info for error {} : ".format(errorCode))
    description = input("Description of error {} : ".format(errorCode))
    fix = input("Provide a fix for error {} : ".format(errorCode))

    #write error to data file
    csvRow = "{}\t{}\t{}\t{}\t{}\n".format(errorCode, name, info, description, fix)
    with open(output_files["datafile"], "a", encoding="utf8") as file:
        #BUG : \n character missing ?
        file.write(csvRow)
        file.close()
    sortfile(output_files["datafile"])
    generateFiles()

def name(errorCode):
    print(getData(errorCode, 'name'))

def info(errorCode):
    print(getData(errorcode, 'info'))

def fix(errorCode):
    print(getData(errorCode, 'fix'))

def description(errorCode):
    print(getData(errorCode, 'description'))

def update():
    sortfile(output_files["datafile"])
    print("Data file sorted")
    generateFiles()
    print("Header file generated")


def delete(errorCode):
    if yes_or_no("Are you sure to delete error code {} ".format(errorCode)):
        file = open(output_files['datafile'], 'r', encoding="utf8")
        lines = file.readlines()
        file.close()

        file = open(output_files['datafile'], 'w', encoding="utf8")
        for line in lines:
            if not errorCode in line:
                file.write(line)
        file.close()

def sortfile(file):
    #Open, read, sort, close
    myfile = open(file, "r", encoding="utf8")
    lines = myfile.readlines()
    writelines = lines[1:]
    writelines.sort()
    myfile.close()

    #Open, write, close
    myfile = open(file, "w", encoding="utf8")
    myfile.write(lines[0])
    myfile.writelines(writelines)
    myfile.close()

def processCommand(command, errorcode):
    if command == "add":
        add(errorcode)
    elif command == "info":
        info(errorcode)
    elif command == "fix":
        fix(errorcode)
    elif command == "description":
        description(errorcode)
    elif command == "delete":
        delete(errorcode)
    elif command == "update":
        update()

def parseArguments(args):
    '''
    Parse given arguments to command
    '''
    #No command provided
    if len(args) == 1:
        print("-----\nPlease provide a command\n\n")
        printHelp(args)
    elif len(args) == 2:
        print("-----\nPlease provide an error code\n\n")
        printHelp(args)
    elif len(args) == 3:
        #arg[1] => command
        #arg[2] => error code
        if not args[1] in commands:
            print("-----\nUnknown command\n\n")
            printHelp(args)
            return
        elif not isInt(args[2]):
            print("-----\nError code not valid\n\n")
            printHelp(args)
        else:
            processCommand(args[1], args[2])


if not os.path.exists(output_files["datafile"]):
    #add csv headers to csv file
    csvfile = open(output_files["datafile"], "w+", encoding="utf8")
    csvfile.write("errorcode\tname\tinfo\tdescription\tfix\n")
    csvfile.close()

parseArguments(sys.argv)
